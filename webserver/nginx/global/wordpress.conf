# WordPress single blog rules.
# Designed to be included in any server {} block.

# This order might seem weird - this is attempted to match last if rules below fail.
# http://wiki.nginx.org/HttpCoreModule

# Wordpress themes (especially Photocrati) often send back inappropriate headers, so ignore them.
# http://serverfault.com/questions/747646/nginx-fastcgi-cache-not-working-for-one-wp-site-but-working-ok-for-time-php-on
#Comment this out if you want to use cache headers instead of nginx defaults
fastcgi_ignore_headers Cache-Control Expires Set-Cookie ;

#fastcgi_cache start
set $skip_cache 0;

# POST requests and urls with a query string should always go to PHP
	if ($request_method = POST) {
		set $skip_cache 1;
	}   
	if ($query_string != "") {
		set $skip_cache 1;
	}   

	# Don't cache uris containing the following segments
	if ($request_uri ~* "(/wp-admin/|/xmlrpc.php|/wp-(app|cron|login|register|mail).php|wp-.*.php|/feed/|index.php|wp-comments-popup.php|wp-links-opml.php|wp-locations.php|sitemap(_index)?.xml|[a-z0-9_-]+-sitemap([0-9]+)?.xml)") {
		set $skip_cache 1;
	}   

	# Don't use the cache for logged in users or recent commenters
	if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
		set $skip_cache 1;
	}

location /nginx_stub_status {
	stub_status on;
	allow 127.0.0.1;
	deny all;
}

location / {
	try_files $uri $uri/ /index.php?$args;
}

location ~ wp-(cron|login|comment-post).php$ {
    limit_req zone=ddos burst=10;
	access_log off;
	error_log off;

	include fastcgi_params;
    fastcgi_index index.php;

    fastcgi_cache_bypass $skip_cache;
    fastcgi_no_cache $skip_cache;
    fastcgi_cache tc-php;
    fastcgi_cache_valid 200 60m;
    fastcgi_pass php;
}

# Add trailing slash to */wp-admin requests.
rewrite /wp-admin$ $scheme://$host$uri/ permanent;

# Uncomment one of the lines below for the appropriate caching plugin (if used).
#include global/wordpress-wp-super-cache.conf;
#include global/wordpress-w3-total-cache.conf;

# Pass all .php files onto a php-fpm/php-fcgi server.
location ~ [^/]\.php(/|$) {
	fastcgi_split_path_info ^(.+?\.php)(/.*)$;
	if (!-f $document_root$fastcgi_script_name) {
		return 404;
	}
	# This is a robust solution for path info security issue and works with "cgi.fix_pathinfo = 1" in /etc/php.ini (default)

	include fastcgi_params;
	fastcgi_index index.php;

    fastcgi_cache_bypass $skip_cache;
	fastcgi_no_cache $skip_cache;
	fastcgi_cache tc-php;
    fastcgi_cache_valid 200 60m;
	fastcgi_pass php;
}